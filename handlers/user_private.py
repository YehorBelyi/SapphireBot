from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from filters.chat_types import ChatTypeFilter
from keyboards.inline import MenuCallBack

from keyboards.reply import generate_keyboard
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_get_products, orm_add_user, orm_add_to_cart, orm_get_order_history
from handlers.menu_processing import get_menu_content

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))

@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")

    await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)

async def add_to_cart(callback: types.CallbackQuery, callback_data:MenuCallBack, session: AsyncSession):
    user = callback.from_user
    await orm_add_user(
        session,
        user_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        phone=None,
    )
    await orm_add_to_cart(session, user_id=user.id, product_id=callback_data.product_id)
    await callback.answer("This product has been added to the cart!")

# Method filter means that it will handle any callback with prefix 'menu_', generated by class MenuCallBack
@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):
    if callback_data.menu_name == "add_to_cart":
        await add_to_cart(callback, callback_data, session)
        return

    try:
        media, reply_markup = await get_menu_content(session,
                                                 level=callback_data.level,
                                                 menu_name=callback_data.menu_name,
                                                 category=callback_data.category,
                                                 page=callback_data.page,
                                                 product_id=callback_data.product_id,
                                                 user_id=callback.from_user.id,
                                                 callback_action=callback)

        await callback.message.edit_media(media=media, reply_markup=reply_markup)
        await callback.answer()
    except Exception as e:
        print(f"Menu error: {e}")

@user_private_router.message(Command("history"))
async def user_history(message: types.Message, session: AsyncSession):
    data = await orm_get_order_history(session, user_id=message.from_user.id)

    if len(data) == 0:
        await message.answer("No orders found!")
        return
    else:

        str = "❇️ YOUR ORDER HISTORY ❇️\n"

        for index, item in enumerate(data, start=1):
            str += f"\n{index}) {item.product.name} (ordered on: {item.created})"

        await message.answer(str)